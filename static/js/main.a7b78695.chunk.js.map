{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","GameImage","className","style","marginBottom","fontSize","fontFamily","fontWeight","this","props","value","src","img_display","width","height","vspace","React","Component","GameButton","Button","variant","size","onClick","Game","state","number_of_heads","number_of_tails","coin_flip_result","Math","floor","random","setState","handleClick","position","display","verticalAlign","countDown","allowZeroExpanded","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAeA,SAASA,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,IAO9CI,E,iLAEF,OACE,6BACE,yBAAKC,UAAU,YACb,0BACEA,UAAS,8BACTC,MAAO,CAAEC,aAAc,GAAIC,SAAU,GAAIC,WAAY,cAAeC,WAAY,WAAaC,KAAKC,MAAMC,QAG5G,yBACEC,IAAMH,KAAKC,MAAMG,YACjBC,MAAQ,IACRC,OAAS,IACTZ,UAAU,2BACVa,OAAS,U,GAfKC,IAAMC,WAsBxBC,E,iLAEF,OACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLC,QAASd,KAAKC,MAAMa,SAHtB,kB,GAHmBN,IAAMC,WAkJhBM,E,YAlIb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXd,MAAO,QACPe,gBAAiB,EACjBC,gBAAiB,EACjBd,YAAa,yDANE,E,2EAWjB,IAAIe,EApDoC,IAAlCC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAuB,QAAU,QAqDvDtB,KAAKuB,SAAS,CAACrB,MAAOiB,IACG,UAArBA,GACFnB,KAAKuB,SAAS,CAACN,gBAAiBjB,KAAKgB,MAAMC,gBAAkB,IAC7DjB,KAAKuB,SAAS,CAACnB,YAjED,0DAkEdJ,KAAKuB,SAAS,CAACrB,MAAO,cAEtBF,KAAKuB,SAAS,CAACL,gBAAiBlB,KAAKgB,MAAME,gBAAkB,IAC7DlB,KAAKuB,SAAS,CAACnB,YApEJ,+DAqEXJ,KAAKuB,SAAS,CAACrB,MAAO,a,mJAKxBF,KAAKuB,SAAS,CAACnB,YAzEG,yEA0ElBJ,KAAKuB,SAAS,CAACrB,MAAO,oB,SAChBd,EAAM,K,OACZY,KAAKwB,c,qIAGG,IAAD,OAiBP,OACE,yBAAK7B,MAhBuB,CAC5B8B,SAAU,WACVnB,OAAQ,OACRD,MAAO,OACPqB,QAAS,UAaP,yBAAK/B,MAVkB,CACzB8B,SAAU,WACVnB,OAAQ,OACRD,MAAO,OACPqB,QAAS,aACTC,cAAe,WAOb,yBAAKjC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEQ,MAAOF,KAAKgB,MAAMd,MAClBE,YAAaJ,KAAKgB,MAAMZ,eAG5B,yBAAKV,UAAU,4BACb,kBAAC,EAAD,CACEoB,QAAS,kBAAM,EAAKc,gBAGxB,yBAAKlC,UAAU,UACb,0BAAMA,UAAS,+BAAkC,WAEnD,yBAAKA,UAAU,mBACb,0BAAMA,UAAS,8BAAiCC,MAAO,CAAEC,aAAc,KAAO,2BAA6BI,KAAKgB,MAAMC,kBAExH,yBAAKvB,UAAU,mBACb,0BAAMA,UAAS,8BAAiCC,MAAO,CAAEC,aAAc,KAAO,yBAA2BI,KAAKgB,MAAME,mBAIxH,yBAAKxB,UAAU,gBACf,kBAAC,IAAD,CAAWC,MAAO,CAACU,MAAO,QAASwB,mBAAmB,GAClD,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,6DAIJ,kBAAC,IAAD,KACI,2BAAG,sEACH,2BAAG,6EACH,2BAAG,4FACH,2BAAG,6JAEH,2BAAG,qXAEH,2BAAG,kJAEH,2BAAG,sRAEH,2BAAG,uIAGX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,qCAIJ,kBAAC,IAAD,KACI,2BACE,0BACEnC,UAAS,2BACTC,MAAO,CAAEC,aAAc,GAAIC,SAAU,GAAIC,WAAY,cAAeC,WAAY,WAAa,gCAE/F,yBACEI,IAAI,wDACJE,MAAQ,IACRC,OAAS,IACTZ,UAAU,wC,GApHfc,IAAMC,WC/CLqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7b78695.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from 'react-accessible-accordion';\nimport './App.scss'\n\nconst img_success = \"https://media.giphy.com/media/gixQfE7XzZfpe/giphy.gif\"\nconst img_fail = \"https://media.giphy.com/media/QBGe6zi0O1aaWxeR8i/giphy.gif\"\nconst img_countdown = \"https://thumbs.gfycat.com/DismalWhisperedEastsiberianlaika-small.gif\"\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction coinFlip() {\n  return (Math.floor(Math.random() * 2) === 0) ? \"heads\" : \"tails\";\n}\n\nclass GameImage extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"img-text\">\n          <span\n            className={`h1 center-block text-center`}\n            style={{ marginBottom: 25, fontSize: 60, fontFamily: \"Courier New\", fontWeight: \"bolder\" }}>{this.props.value}\n          </span>\n        </div>\n        <img\n          src={ this.props.img_display }\n          width={ 600 }\n          height={ 600 }\n          className=\"center-block text-center\"\n          vspace={ 10 }\n        />\n      </div>\n    )\n  }\n}\n\nclass GameButton extends React.Component {\n  render() {\n    return (\n      <Button\n        variant=\"success\"\n        size=\"lg\"\n        onClick={this.props.onClick}\n      >\n        Challenge!\n      </Button>\n    )\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"Ready\",\n      number_of_heads: 0,\n      number_of_tails: 0,\n      img_display: \"https://media.giphy.com/media/uRD0V1GreQuru/giphy.gif\"\n    }\n  }\n\n  handleClick() {\n    var coin_flip_result = coinFlip()\n    this.setState({value: coin_flip_result})\n    if (coin_flip_result === \"heads\") {\n      this.setState({number_of_heads: this.state.number_of_heads + 1})\n      this.setState({img_display: img_success})\n      this.setState({value: \"STOLEN!\"})\n    } else {\n      this.setState({number_of_tails: this.state.number_of_tails + 1})\n      this.setState({img_display: img_fail})\n      this.setState({value: \"SAFE!\"})\n    }\n  }\n\n  async countDown() {\n    this.setState({img_display: img_countdown})\n    this.setState({value: \"This gift is...\"})\n    await sleep(3000);\n    this.handleClick();\n  }\n\n  render() {\n\n    const parentContainerStyles = {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      display: 'table'\n    };\n\n    const subContainerStyles = {\n      position: 'relative',\n      height: '100%',\n      width: '100%',\n      display: 'table-cell',\n      verticalAlign: 'middle'\n    };\n\n    return (\n      <div style={parentContainerStyles}>\n        <div style={subContainerStyles}>\n\n        <div className=\"game\">\n          <div className=\"game-image\">\n            <GameImage\n              value={this.state.value}\n              img_display={this.state.img_display}\n            />\n          </div>\n          <div className=\"center-block text-center\">\n            <GameButton\n              onClick={() => this.countDown()}\n            />\n          </div>\n          <div className=\"status\">\n            <span className={`h3 center-block text-center`}>{\"Status\"}</span>\n          </div>\n          <div className=\"number-of-heads\">\n            <span className={`h2 center-block text-center`} style={{ marginBottom: 25 }}>{\"Number of Stolen Gifts: \" + this.state.number_of_heads}</span>\n          </div>\n          <div className=\"number-of-tails\">\n            <span className={`h2 center-block text-center`} style={{ marginBottom: 25 }}>{\"Number of Safe Gifts: \" + this.state.number_of_tails}</span>\n          </div>\n        </div>\n\n        <div className=\"instructions\">\n        <Accordion style={{width: '100%'}} allowZeroExpanded={true}>\n            <AccordionItem>\n                <AccordionItemHeading>\n                    <AccordionItemButton>\n                        The Probabilistic White Elephant: Rules of the Road\n                    </AccordionItemButton>\n                </AccordionItemHeading>\n                <AccordionItemPanel>\n                    <p><b>Starting with Player #1, they either: </b></p>\n                    <p><b>a) Pick from The Pool of gifts and opens, or </b></p>\n                    <p><b>b) Challenge to steal a non-stolen gift from another Player.</b></p>\n                    <p><b>(Note: with the first person, their only option is (a), but starting with #2 and beyond, both (a) and (b) are valid options.)</b></p>\n\n                    <p><b>If the Player challenges, then the person with the gift can either freely give it to the Player, or can enter into the challenge, in which case the success of the steal is determined by a coin flip.  If the gift is successfully stolen, then that gift is labeled \"stolen\" for that round (i.e., it can no longer be challenged for that round). </b></p>\n\n                    <p><b>If an unsuccessful challenge occurs, then the Player must choose to challenge another gift or pick from The Pool. </b></p>\n\n                    <p><b>If a successful challenge occurs, then the person who just gave up the gift must now choose either option (a) or (b).  Note that a gift can only be *stolen* once per round, but a key point is that it can be *challenged* multiple times per round. </b></p>\n\n                    <p><b>The round ends once a gift is selected from The Pool, and the game ends at the end of the last round.</b></p>\n                </AccordionItemPanel>\n            </AccordionItem>\n            <AccordionItem>\n                <AccordionItemHeading>\n                    <AccordionItemButton>\n                        Who is the Ultimate Winner?\n                    </AccordionItemButton>\n                </AccordionItemHeading>\n                <AccordionItemPanel>\n                    <p>\n                      <span\n                        className={`center-block text-center`}\n                        style={{ marginBottom: 25, fontSize: 32, fontFamily: \"Courier New\", fontWeight: \"bolder\" }}>{\"EVERYBODY! HAPPY HOLIDAYS!!!\"}\n                      </span>\n                      <img\n                        src=\"https://media.giphy.com/media/9w475hDWEPVlu/giphy.gif\"\n                        width={ 200 }\n                        height={ 200 }\n                        className=\"center-block text-center\"\n                      />\n                    </p>\n                </AccordionItemPanel>\n            </AccordionItem>\n        </Accordion>\n        </div>\n\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap-theme.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}